{"version":3,"sources":["utils/canvasUtils.ts","styles.ts","modules/sharedActions.ts","modules/currentStroke/slice.ts","shared/ColorPanel.tsx","modules/historyIndex/slice.ts","modules/strokes/selectors.ts","shared/EditPanel.tsx","CanvasContext.tsx","shared/FilePanel.tsx","modules/currentStroke/selectors.ts","modules/historyIndex/selectors.ts","App.tsx","actions.ts","modules/strokes/slice.ts","store.ts","index.tsx"],"names":["drawStroke","context","points","color","length","strokeStyle","beginPath","moveTo","x","y","forEach","point","lineTo","stroke","closePath","clearCanvas","canvas","getContext","fillStyle","fillRect","width","height","getCanvasImage","Promise","resolve","reject","toBlob","MainContainer","styled","div","Header","PaintGrid","CanvasContainer","Tools","endStroke","createAction","currentStroke","createSlice","name","initialState","reducers","beginStroke","state","action","payload","updateStroke","push","setStrokeColor","extraReducers","builder","addCase","actions","COLORS","ColorPanel","dispatch","useDispatch","className","map","onClick","onColorChange","style","backgroundColor","historyIndex","undo","Math","min","redo","max","strokesSelector","strokes","strokesLengthSelector","EditPanel","undoLimit","useSelector","CanvasContext","createContext","useCanvas","useContext","FilePanel","canvasRef","exportToFile","a","current","file","saveAs","currentStrokeSelector","historyIndexSelector","App","isDrawing","getCanvasWithContext","endDrawing","useEffect","requestAnimationFrame","slice","scale","setCanvasSize","lineJoin","lineCap","lineWidth","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","onMouseOut","onMouseMove","ref","splice","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","combineReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64ea1b58.chunk.js","sourcesContent":["import { rejects } from \"assert\";\r\nimport { Point } from \"./types\";\r\n\r\nexport const drawStroke = (\r\n  context: CanvasRenderingContext2D,\r\n  points: Point[],\r\n  color: string\r\n) => {\r\n  if (!points.length) {\r\n    return;\r\n  }\r\n  context.strokeStyle = color;\r\n  context.beginPath();\r\n  context.moveTo(points[0].x, points[0].y);\r\n  points.forEach((point) => {\r\n    context.lineTo(point.x, point.y);\r\n    context.stroke();\r\n  });\r\n  context.closePath();\r\n};\r\n\r\nexport const clearCanvas = (canvas: HTMLCanvasElement) => {\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    return;\r\n  }\r\n  context.fillStyle = \"white\";\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n};\r\n\r\nexport const setCanvasSize = (\r\n  canvas: HTMLCanvasElement,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  canvas.width = width * 2;\r\n  canvas.height = height * 2;\r\n  canvas.style.width = `${width}px`;\r\n  canvas.style.height = `${height}px`;\r\n  canvas.getContext(\"2d\")?.scale(2, 2);\r\n};\r\n\r\nexport const getCanvasImage = (\r\n  canvas: HTMLCanvasElement | null\r\n): Promise<null | Blob> => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!canvas) {\r\n      return reject(null);\r\n    }\r\n    canvas.toBlob(resolve);\r\n  });\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-height: 100%;\r\n  @media (max-width: 800px) {\r\n    max-width: 520px;\r\n    padding: 0 15px;\r\n  }\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 5;\r\n  width: 100%;\r\n  height: 50px;\r\n  padding: 21px 21px;\r\n  font-size: 30px;\r\n  color: #d0fefe;\r\n  background-color: #1f3b4d;\r\n  cursor: default;\r\n`;\r\n\r\nexport const PaintGrid = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const CanvasContainer = styled.div`\r\n  position: relative;\r\n  top: 0px;\r\n  left: 21px;\r\n  right: 21px;\r\n  flex-grow: 2;\r\n`;\r\n\r\nexport const Tools = styled.div`\r\n  flex-grow: 3;\r\n  margin-top: -21px;\r\n`;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { Stroke } from \"../utils/types\";\r\n\r\nexport const endStroke = createAction<{\r\n  stroke: Stroke;\r\n  historyIndex: number;\r\n}>(\"endStroke\");\r\n","import { endStroke } from \"../sharedActions\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, Point } from \"../../utils/types\";\r\n\r\nconst initialState: RootState[\"currentStroke\"] = {\r\n  points: [],\r\n  color: \"#000\",\r\n};\r\n\r\nconst currentStroke = createSlice({\r\n  name: \"currentStroke\",\r\n  initialState,\r\n  reducers: {\r\n    beginStroke: (state, action: PayloadAction<Point>) => {\r\n      state.points = [action.payload];\r\n    },\r\n    updateStroke: (state, action: PayloadAction<Point>) => {\r\n      state.points.push(action.payload);\r\n    },\r\n    setStrokeColor: (state, action: PayloadAction<string>) => {\r\n      state.color = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(endStroke, (state) => {\r\n      state.points = [];\r\n    });\r\n  },\r\n});\r\n\r\nexport default currentStroke.reducer;\r\n\r\nexport const { beginStroke, updateStroke, setStrokeColor } =\r\n  currentStroke.actions;\r\n\r\n// export const reducer = createReducer(initialState, (builder) => {\r\n//   builder.addCase(beginStroke, (state, action) => {\r\n//     state.points = [action.payload];\r\n//   });\r\n//   builder.addCase(updateStroke, (state, action) => {\r\n//     state.points.push(action.payload);\r\n//   });\r\n//   builder.addCase(setStrokeColor, (state, action) => {\r\n//     state.color = action.payload;\r\n//   });\r\n//   builder.addCase(endStroke, (state, action) => {\r\n//     state.points = [];\r\n//   });\r\n// });\r\n\r\n// export const reducer = (\r\n//   state: RootState[\"currentStroke\"] = initialState,\r\n//   action: Action\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case BEGIN_STROKE: {\r\n//       return {\r\n//         ...state,\r\n//         points: [action.payload],\r\n//       };\r\n//     }\r\n//     case UPDATE_STROKE: {\r\n//       return {\r\n//         ...state,\r\n//         points: [...state.points, action.payload],\r\n//       };\r\n//     }\r\n//     case SET_STROKE_COLOR: {\r\n//       return {\r\n//         ...state,\r\n//         color: action.payload,\r\n//       };\r\n//     }\r\n//     case END_STROKE: {\r\n//       return {\r\n//         ...state,\r\n//         points: [],\r\n//       };\r\n//     }\r\n//     default: {\r\n//       return state;\r\n//     }\r\n//   }\r\n// };\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setStrokeColor } from \"../modules/currentStroke/slice\";\r\n\r\nconst COLORS = [\r\n  \"#000000\",\r\n  \"#808080\",\r\n  \"#c0c0c0\",\r\n  \"#ffffff\",\r\n  \"#800000\",\r\n  \"#ff0000\",\r\n  \"#808000\",\r\n  \"#ffff00\",\r\n  \"#008000\",\r\n  \"#00ff00\",\r\n  \"#008080\",\r\n  \"#00ffff\",\r\n  \"#000080\",\r\n  \"#0000ff\",\r\n  \"#800080\",\r\n  \"#ff00ff\",\r\n  \"#808040\",\r\n  \"#ffff80\",\r\n  \"#004040\",\r\n  \"#00ff80\",\r\n  \"#0080ff\",\r\n  \"#80ffff\",\r\n  \"#004080\",\r\n  \"#8080ff\",\r\n  \"#8000ff\",\r\n  \"#ff0080\",\r\n  \"#804000\",\r\n  \"#ff8040\",\r\n  \"#FF6163\",\r\n  \"#CFFDBC\",\r\n];\r\n\r\nexport const ColorPanel = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onColorChange = (color: string) => {\r\n    dispatch(setStrokeColor(color));\r\n  };\r\n\r\n  return (\r\n    <div className=\"tool-container\">\r\n      <div className=\"colors-panel\">\r\n        <div className=\"title-bar-text\">Colors</div>\r\n        <div className=\"colors\">\r\n          {COLORS.map((color: string) => (\r\n            <div\r\n              key={color}\r\n              onClick={() => {\r\n                onColorChange(color);\r\n              }}\r\n              className=\"color\"\r\n              style={{ backgroundColor: color }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../utils/types\";\r\nimport { endStroke } from \"../sharedActions\";\r\n\r\n// const initialState: RootState[\"historyIndex\"] = 0;\r\n\r\n// export const reducer = createReducer(initialState, (builder) => {\r\n//   builder.addCase(undo, (state, action) => {\r\n//     return Math.min(state + 1, action.payload);\r\n//   });\r\n//   builder.addCase(redo, (state, action) => {\r\n//     return Math.max(state - 1, 0);\r\n//   });\r\n//   builder.addCase(endStroke, (state, action) => {\r\n//     return 0;\r\n//   });\r\n// });\r\n\r\n const historyIndex = createSlice({\r\n  name: \"historyIndex\",\r\n  initialState: 0,\r\n  reducers: {\r\n    undo: (state, action: PayloadAction<number>) => {\r\n      return Math.min(state + 1, action.payload);\r\n    },\r\n    redo: (state) => {\r\n      return Math.max(state - 1, 0);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(endStroke, () => {\r\n      return 0;\r\n    });\r\n  },\r\n});\r\n\r\nexport default historyIndex.reducer;\r\n\r\nexport const { undo, redo } = historyIndex.actions;\r\n\r\n// export const reducer = (\r\n//   state: RootState[\"historyIndex\"] = 0,\r\n//   action: HistoryIndexAction\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case END_STROKE: {\r\n//       return 0;\r\n//     }\r\n//     case UNDO: {\r\n//       return Math.min(state + 1, action.payload);\r\n//     }\r\n//     case REDO: {\r\n//       return Math.max(state - 1, 0);\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { RootState } from \"../../utils/types\";\r\n\r\nexport const strokesSelector = (state: RootState) => state.strokes;\r\n\r\nexport const strokesLengthSelector = (state: RootState) => state.strokes.length;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { undo, redo } from \"../modules/historyIndex/slice\";\r\nimport { strokesLengthSelector } from \"../modules/strokes/selectors\";\r\n\r\nexport const EditPanel = () => {\r\n  const dispatch = useDispatch();\r\n  const undoLimit = useSelector(strokesLengthSelector);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => dispatch(undo(undoLimit))}>Undo</button>\r\n      <button onClick={() => dispatch(redo())}>Redo</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  createContext,\r\n  PropsWithChildren,\r\n  useRef,\r\n  RefObject,\r\n  useContext,\r\n} from \"react\";\r\n\r\nexport const CanvasContext = createContext<RefObject<HTMLCanvasElement>>(\r\n  {} as RefObject<HTMLCanvasElement>\r\n);\r\n\r\nexport const CanvasProvider = ({ children }: PropsWithChildren<{}>) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  return (\r\n    <CanvasContext.Provider value={canvasRef}>\r\n      {children}\r\n    </CanvasContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCanvas = () => useContext(CanvasContext);\r\n","import React from \"react\";\r\nimport { useCanvas } from \"../CanvasContext\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { getCanvasImage } from \"../utils/canvasUtils\";\r\n\r\nexport const FilePanel = () => {\r\n  const canvasRef = useCanvas();\r\n\r\n  const exportToFile = async () => {\r\n    const file = await getCanvasImage(canvasRef.current);\r\n    if (!file) {\r\n      return;\r\n    }\r\n    saveAs(file, \"drawing.png\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tool-container\">\r\n      <div className=\"title-bar-text\">File</div>\r\n      <button className=\"save-button\" onClick={exportToFile}>\r\n          Export\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { RootState } from \"../../utils/types\";\r\n\r\nexport const currentStrokeSelector = (state: RootState) => state.currentStroke;\r\n","import { RootState } from \"../../utils/types\";\r\n\r\nexport const historyIndexSelector = (state: RootState) => state.historyIndex;\r\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"./utils/types\";\nimport { drawStroke, clearCanvas, setCanvasSize } from \"./utils/canvasUtils\";\nimport \"./App.css\";\nimport {\n  MainContainer,\n  Header,\n  PaintGrid,\n  CanvasContainer,\n  Tools,\n} from \"./styles\";\nimport { ColorPanel } from \"./shared/ColorPanel\";\nimport { EditPanel } from \"./shared/EditPanel\";\nimport { useCanvas } from \"./CanvasContext\";\nimport { FilePanel } from \"./shared/FilePanel\";\nimport { currentStrokeSelector } from \"./modules/currentStroke/selectors\";\nimport { historyIndexSelector } from \"./modules/historyIndex/selectors\";\nimport {\n  strokesSelector,\n  strokesLengthSelector,\n} from \"./modules/strokes/selectors\";\nimport { beginStroke, updateStroke } from \"./modules/currentStroke/slice\";\nimport { endStroke } from \"./modules/sharedActions\";\n\nconst WIDTH = 700;\nconst HEIGHT = 520;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const canvasRef = useCanvas();\n  const isDrawing = useSelector<RootState>(\n    (state) => !!state.currentStroke.points.length\n  );\n  const currentStroke = useSelector<RootState, RootState[\"currentStroke\"]>(\n    currentStrokeSelector\n  );\n  const historyIndex = useSelector<RootState, RootState[\"historyIndex\"]>(\n    historyIndexSelector\n  );\n  const strokes = useSelector<RootState, RootState[\"strokes\"]>(strokesSelector);\n  const getCanvasWithContext = (canvas = canvasRef.current) => {\n    return { canvas, context: canvas?.getContext(\"2d\") };\n  };\n\n  const startDrawing = ({\n    nativeEvent,\n  }: React.MouseEvent<HTMLCanvasElement>) => {\n    const { offsetX, offsetY } = nativeEvent;\n\n    dispatch(beginStroke({ x: offsetX, y: offsetY }));\n  };\n  const draw = ({ nativeEvent }: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n\n    dispatch(updateStroke({ x: offsetX, y: offsetY }));\n  };\n  const endDrawing = () => {\n    if (isDrawing) {\n      dispatch(endStroke({ historyIndex, stroke: currentStroke }));\n    }\n  };\n\n  useEffect(() => {\n    const { canvas, context } = getCanvasWithContext();\n    if (!context || !canvas) {\n      return;\n    }\n    requestAnimationFrame(() => {\n      clearCanvas(canvas);\n\n      strokes.slice(0, strokes.length - historyIndex).forEach((stroke) => {\n        drawStroke(context, stroke.points, stroke.color);\n      });\n    });\n  }, [historyIndex]);\n\n  useEffect(() => {\n    const { context } = getCanvasWithContext();\n    if (!context) {\n      return;\n    }\n    requestAnimationFrame(() =>\n      drawStroke(context, currentStroke.points, currentStroke.color)\n    );\n  }, [currentStroke]);\n\n  useEffect(() => {\n    const { canvas, context } = getCanvasWithContext();\n    if (!canvas || !context) {\n      return;\n    }\n\n    setCanvasSize(canvas, WIDTH, HEIGHT);\n\n    context.lineJoin = \"round\";\n    context.lineCap = \"round\";\n    context.lineWidth = 3;\n    context.strokeStyle = \"black\";\n\n    clearCanvas(canvas);\n  }, []);\n\n  return (\n    <MainContainer>\n      <Header>\n        <div>React Redux Paint</div>\n        <div className=\"author\">Alexander Komkov</div>\n      </Header>\n      <PaintGrid>\n        <CanvasContainer>\n          <canvas\n            onMouseDown={startDrawing}\n            onMouseUp={endDrawing}\n            onMouseOut={endDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}\n          />\n        </CanvasContainer>\n        <Tools>\n          <ColorPanel />\n          <EditPanel />\n          <FilePanel />\n        </Tools>\n      </PaintGrid>\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { Point, Stroke } from \"./utils/types\";\r\n\r\nexport const beginStroke = createAction<Point>(\"BEGIN_STROKE\");\r\n\r\nexport const updateStroke = createAction<Point>(\"UPDATE_STROKE\");\r\n\r\nexport const setStrokeColor = createAction<string>(\"SET_STROKE_COLOR\");\r\n\r\nexport const endStroke = createAction<{\r\n  stroke: Stroke;\r\n  historyIndex: number;\r\n}>(\"endStroke\");\r\n\r\nexport const undo = createAction<number>(\"UNDO\");\r\n\r\nexport const redo = createAction(\"REDO\");\r\n\r\n// export const BEGIN_STROKE = \"BEGIN_STROKE\";\r\n// export const UPDATE_STROKE = \" UPDATE_STROKE\";\r\n// export const END_STROKE = \"END_STROKE\";\r\n// export const SET_STROKE_COLOR = \"SET_STROKE_COLOR\";\r\n// export const UNDO = \"UNDO\";\r\n// export const REDO = \"REDO\";\r\n\r\n// export type Action =\r\n//   | {\r\n//       type: typeof BEGIN_STROKE;\r\n//       payload: Point;\r\n//     }\r\n//   | {\r\n//       type: typeof UPDATE_STROKE;\r\n//       payload: Point;\r\n//     }\r\n//   | {\r\n//       type: typeof END_STROKE;\r\n//     }\r\n//   | {\r\n//       type: typeof SET_STROKE_COLOR;\r\n//       payload: string;\r\n//     }\r\n//   | {\r\n//       type: typeof UNDO;\r\n//     }\r\n//   | {\r\n//       type: typeof REDO;\r\n//     };\r\n\r\n// export const beginStroke = (x: number, y: number) => {\r\n//   return { type: BEGIN_STROKE, payload: { x, y } };\r\n// };\r\n\r\n// export const updateStroke = (x: number, y: number) => {\r\n//   return { type: UPDATE_STROKE, payload: { x, y } };\r\n// };\r\n\r\n// export const endStroke = (historyLimit: number, stroke: Stroke) => {\r\n//   return { type: END_STROKE, payload: { historyLimit, stroke } };\r\n// };\r\n\r\n// export const setStrokeColor = (color: string) => {\r\n//   return { type: SET_STROKE_COLOR, payload: color };\r\n// };\r\n\r\n// export const undo = (undoLimit: number) => {\r\n//   return { type: UNDO, payload: undoLimit };\r\n// };\r\n\r\n// export const redo = () => {\r\n//   return { type: REDO };\r\n// };\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../utils/types\";\r\nimport { endStroke } from \"../../actions\";\r\n\r\nconst initialStrokes: RootState[\"strokes\"] = [];\r\n\r\nconst strokes = createSlice({\r\n  name: \"strokes\",\r\n  initialState: initialStrokes,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(endStroke, (state, action) => {\r\n      const { historyIndex, stroke } = action.payload;\r\n      if (historyIndex === 0) {\r\n        state.push(stroke);\r\n      } else {\r\n        state.splice(-historyIndex, historyIndex, stroke);\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport default strokes.reducer;\r\n\r\n// export const reducer = createReducer(initialStrokes, (builder) => {\r\n//   builder.addCase(endStroke, (state, action) => {\r\n//     const { historyIndex, stroke } = action.payload;\r\n//     if (historyIndex === 0) {\r\n//       state.push(stroke);\r\n//     } else {\r\n//       state.splice(-historyIndex, historyIndex, stroke);\r\n//     }\r\n//   });\r\n// });\r\n\r\n// export const reducer = (state: RootState[\"strokes\"] = [], action: Action) => {\r\n//   switch (action.type) {\r\n//     case END_STROKE: {\r\n//       const { historyLimit, stroke } = action.payload;\r\n//       if (!stroke.points.length) {\r\n//         return state;\r\n//       }\r\n//       return [...state.slice(0, state.length - historyLimit), stroke];\r\n//     }\r\n//     default: {\r\n//       return state;\r\n//     }\r\n//   }\r\n// };\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\nimport historyIndex from \"./modules/historyIndex/slice\";\r\nimport currentStroke from \"./modules/currentStroke/slice\";\r\nimport strokes from \"./modules/strokes/slice\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nexport const store = configureStore({\r\n  reducer: combineReducers({\r\n    historyIndex,\r\n    currentStroke,\r\n    strokes,\r\n  }),\r\n  middleware,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}